#!/usr/bin/env bash
# =============================================================================
# Spec Kit - 計劃設定腳本 (setup-plan.sh)
# =============================================================================
# 此腳本用於初始化新功能的實作計劃文件
# 它會從模板複製計劃文件並設置必要的目錄結構
# =============================================================================

# 遇到錯誤立即退出，提高腳本可靠性
set -e

# =============================================================================
# 參數解析區塊
# =============================================================================

# 初始化變數
JSON_MODE=false  # 是否以 JSON 格式輸出
ARGS=()          # 儲存其他未處理的參數

# 循環處理所有命令列參數
for arg in "$@"; do
    case "$arg" in
        --json)
            # 啟用 JSON 輸出模式，用於程式化呼叫
            JSON_MODE=true
            ;;
        --help|-h)
            # 顯示幫助資訊並退出
            echo "使用方式：$0 [--json]"
            echo ""
            echo "選項說明："
            echo "  --json    以 JSON 格式輸出結果（適用於腳本整合）"
            echo "  --help    顯示此說明訊息"
            echo ""
            echo "功能說明："
            echo "  此腳本會為目前的功能分支建立實作計劃文件"
            echo "  它會從模板複製計劃文件並確保目錄結構正確"
            exit 0
            ;;
        *)
            # 將未識別的參數儲存起來（以備將來擴展）
            ARGS+=("$arg")
            ;;
    esac
done

# =============================================================================
# 環境初始化區塊
# =============================================================================

# 取得腳本所在目錄的絕對路徑
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# 載入共用的工具函數和變數定義
source "$SCRIPT_DIR/common.sh"

# 從通用函數取得功能相關的所有路徑和環境變數
# 這會設定 FEATURE_SPEC, IMPL_PLAN, FEATURE_DIR 等變數
eval $(get_feature_paths)

# =============================================================================
# 驗證區塊
# =============================================================================

# 檢查我們是否在正確的功能分支上（僅適用於 git 儲存庫）
# 這確保我們不會意外在錯誤的分支上操作
check_feature_branch "$CURRENT_BRANCH" "$HAS_GIT" || exit 1

# =============================================================================
# 目錄和文件建立區塊
# =============================================================================

# 確保功能規格目錄存在，如果不存在就建立
mkdir -p "$FEATURE_DIR"

# =============================================================================
# 模板複製區塊
# =============================================================================

# 定義計劃模板的來源路徑
TEMPLATE="$REPO_ROOT/.specify/templates/plan-template.md"

# 檢查模板是否存在並複製
if [[ -f "$TEMPLATE" ]]; then
    # 從模板複製計劃文件到目標位置
    cp "$TEMPLATE" "$IMPL_PLAN"
    echo "已從模板複製計劃文件到：$IMPL_PLAN"
else
    # 如果模板不存在，發出警告但仍建立空文件
    echo "警告：計劃模板在 $TEMPLATE 未找到"
    echo "將建立空的計劃文件，您可以手動編寫內容"
    # 建立空的計劃文件，讓使用者可以手動編寫
    touch "$IMPL_PLAN"
fi

# =============================================================================
# 輸出結果區塊
# =============================================================================

# 根據輸出模式顯示結果
if $JSON_MODE; then
    # JSON 格式輸出，適用於其他腳本或工具整合
    printf '{"FEATURE_SPEC":"%s","IMPL_PLAN":"%s","SPECS_DIR":"%s","BRANCH":"%s","HAS_GIT":"%s"}\n' \
        "$FEATURE_SPEC" "$IMPL_PLAN" "$FEATURE_DIR" "$CURRENT_BRANCH" "$HAS_GIT"
else
    # 人類可讀的格式輸出
    echo "功能規格文件：$FEATURE_SPEC"
    echo "實作計劃文件：$IMPL_PLAN"
    echo "規格目錄：$FEATURE_DIR"
    echo "目前分支：$CURRENT_BRANCH"
    echo "是否為 Git 儲存庫：$HAS_GIT"
fi
