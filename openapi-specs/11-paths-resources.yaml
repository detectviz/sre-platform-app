# Resources API Paths
paths:
  /resources:
    get:
      tags: [Resources]
      summary: List resources
      description: Retrieve a paginated list of resources.
      operationId: listResources
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: bookmarked
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: A paginated list of resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResources'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Resources]
      summary: Create resource
      operationId: createResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceCreate'
      responses:
        '201':
          description: Resource created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    get:
      tags: [Resources]
      summary: Get resource by ID
      operationId: getResourceById
      responses:
        '200':
          description: A single resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags: [Resources]
      summary: Update resource
      operationId: updateResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceUpdate'
      responses:
        '200':
          description: Resource updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Resources]
      summary: Delete resource
      operationId: deleteResource
      responses:
        '204':
          description: Resource deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/overview:
    get:
      tags: [Resources]
      summary: Get resource overview
      operationId: getResourceOverview
      responses:
        '200':
          description: Resource overview data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOverviewData'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/topology:
    get:
      tags: [Resources]
      summary: Get resource topology
      operationId: getResourceTopology
      responses:
        '200':
          description: Resource topology data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/ResourceLink'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/{id}/metrics:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    get:
      tags: [Resources]
      summary: Get resource metrics
      operationId: getResourceMetrics
      responses:
        '200':
          description: Time series metrics for the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsData'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/{id}/alert-rules:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    get:
      tags: [Resources]
      summary: List alert rules for a resource
      operationId: listAlertRulesForResource
      responses:
        '200':
          description: A list of alert rules associated with the resource.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertRule'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resource-links:
    get:
      tags: [Resources]
      summary: List resource links
      description: Retrieve a paginated list of relationships between resources.
      operationId: listResourceLinks
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: source_resource_id
          in: query
          schema:
            type: string
        - name: target_resource_id
          in: query
          schema:
            type: string
        - name: link_type
          in: query
          schema:
            type: string
            enum: [depends_on, connects_to, includes, manages, monitors]
      responses:
        '200':
          description: A paginated list of resource links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResourceLinks'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Resources]
      summary: Create resource link
      description: Create a relationship between two resources.
      operationId: createResourceLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceLinkCreate'
      responses:
        '201':
          description: Resource link created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceLink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resource-links/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    patch:
      tags: [Resources]
      summary: Update resource link
      operationId: updateResourceLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceLinkUpdate'
      responses:
        '200':
          description: Resource link updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceLink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Resources]
      summary: Delete resource link
      operationId: deleteResourceLink
      responses:
        '204':
          description: Resource link deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/datasources:
    get:
      tags: [Resources]
      summary: List datasources
      description: Retrieve a paginated list of monitoring datasources.
      operationId: listDatasources
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
      responses:
        '200':
          description: A paginated list of datasources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDatasources'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Resources]
      summary: Create datasource
      description: Register a new datasource.
      operationId: createDatasource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourceCreate'
      responses:
        '201':
          description: Datasource created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datasource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/datasources/batch-actions:
    post:
      tags: [Resources]
      summary: Batch datasource actions
      description: Perform batch operations on datasources.
      operationId: batchDatasourceActions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, ids]
              properties:
                action:
                  type: string
                  enum: [delete]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch action completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/datasources/test:
    post:
      tags: [Resources]
      summary: Test datasource connection
      description: Validate connectivity for a datasource configuration without persisting it.
      operationId: testDatasourceConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourceTestRequest'
      responses:
        '200':
          description: Connection test result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasourceTestResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/datasources/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    patch:
      tags: [Resources]
      summary: Update datasource
      operationId: updateDatasource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourceUpdate'
      responses:
        '200':
          description: Datasource updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datasource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Resources]
      summary: Delete datasource
      operationId: deleteDatasource
      responses:
        '204':
          description: Datasource deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/datasources/{id}/test:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    post:
      tags: [Resources]
      summary: Test existing datasource connection
      operationId: testExistingDatasource
      responses:
        '200':
          description: Connection test result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasourceTestResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/datasources/{id}/connection-tests:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    get:
      tags: [Resources]
      summary: List datasource connection tests
      operationId: listDatasourceConnectionTests
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Paginated connection test logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDatasourceConnectionTests'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/discovery-jobs:
    get:
      tags: [Resources]
      summary: List discovery jobs
      description: Retrieve a paginated list of resource discovery jobs.
      operationId: listDiscoveryJobs
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
      responses:
        '200':
          description: A paginated list of discovery jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDiscoveryJobs'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Resources]
      summary: Create discovery job
      description: Schedule a new discovery job.
      operationId: createDiscoveryJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoveryJobCreate'
      responses:
        '201':
          description: Discovery job created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryJob'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/discovery-jobs/batch-actions:
    post:
      tags: [Resources]
      summary: Batch discovery job actions
      description: Perform batch operations on discovery jobs.
      operationId: batchDiscoveryJobActions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, ids]
              properties:
                action:
                  type: string
                  enum: [delete]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch action completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/discovery-jobs/test:
    post:
      tags: [Resources]
      summary: Test discovery job configuration
      operationId: testDiscoveryJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoveryJobTestRequest'
      responses:
        '200':
          description: Discovery job test result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryJobTestResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/discovery-jobs/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    patch:
      tags: [Resources]
      summary: Update discovery job
      operationId: updateDiscoveryJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoveryJobUpdate'
      responses:
        '200':
          description: Discovery job updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryJob'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Resources]
      summary: Delete discovery job
      operationId: deleteDiscoveryJob
      responses:
        '204':
          description: Discovery job deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/discovery-jobs/{id}/run:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    post:
      tags: [Resources]
      summary: Run discovery job now
      operationId: runDiscoveryJob
      responses:
        '200':
          description: Run request accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/discovery-jobs/{id}/results:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    get:
      tags: [Resources]
      summary: List discovered resources
      description: Retrieve resources discovered by a job.
      operationId: listDiscoveredResources
      responses:
        '200':
          description: Discovered resources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscoveredResource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resource-groups:
    get:
      tags: [Resources]
      summary: List resource groups
      description: Retrieve a paginated list of resource groups.
      operationId: listResourceGroups
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
      responses:
        '200':
          description: A paginated list of resource groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResourceGroups'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Resources]
      summary: Create resource group
      description: Create a new logical resource group.
      operationId: createResourceGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceGroupCreate'
      responses:
        '201':
          description: Resource group created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resource-groups/batch-actions:
    post:
      tags: [Resources]
      summary: Batch resource group actions
      operationId: batchResourceGroupActions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, ids]
              properties:
                action:
                  type: string
                  enum: [delete]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch action completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resource-groups/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    put:
      tags: [Resources]
      summary: Update resource group
      operationId: updateResourceGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceGroupUpdate'
      responses:
        '200':
          description: Resource group updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Resources]
      summary: Delete resource group
      operationId: deleteResourceGroup
      responses:
        '204':
          description: Resource group deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/batch-tags:
    post:
      tags: [Resources]
      summary: Batch tag resources
      operationId: batchTagResources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [resource_ids, tags]
              properties:
                resource_ids:
                  type: array
                  items:
                    type: string
                tags:
                  type: array
                  items:
                    $ref: '#/components/schemas/KeyValueTag'
      responses:
        '200':
          description: Batch tagging completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/batch-actions:
    post:
      tags: [Resources]
      summary: Batch resource actions
      operationId: batchResourceActions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, ids]
              properties:
                action:
                  type: string
                  enum: [delete]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch action completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    PaginatedResources:
      type: object
      required: [items, total]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    ResourceLink:
      type: object
      required: [id, source_resource_id, target_resource_id, link_type, created_at, updated_at]
      properties:
        id:
          type: string
          readOnly: true
        source_resource_id:
          type: string
        target_resource_id:
          type: string
        link_type:
          type: string
          enum: [depends_on, connects_to, includes, manages, monitors]
        metadata:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true

    ResourceLinkCreate:
      type: object
      required: [source_resource_id, target_resource_id, link_type]
      properties:
        source_resource_id:
          type: string
        target_resource_id:
          type: string
        link_type:
          type: string
          enum: [depends_on, connects_to, includes, manages, monitors]
        metadata:
          type: object
          additionalProperties: true

    ResourceLinkUpdate:
      type: object
      properties:
        source_resource_id:
          type: string
        target_resource_id:
          type: string
        link_type:
          type: string
          enum: [depends_on, connects_to, includes, manages, monitors]
        metadata:
          type: object
          additionalProperties: true

    PaginatedResourceLinks:
      type: object
      required: [items, total]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLink'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    Datasource:
      type: object
      required: [id, name, type, status, url, auth_method, created_at, updated_at]
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        type:
          type: string
          enum: [victoriametrics, grafana, elasticsearch, prometheus, custom]
        status:
          type: string
          enum: [ok, error, pending]
        url:
          type: string
          format: uri
        auth_method:
          type: string
          enum: [token, basic_auth, keycloak_integration, none]
        tags:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueTag'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true

    DatasourceCreate:
      type: object
      required: [name, type, url, auth_method]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [victoriametrics, grafana, elasticsearch, prometheus, custom]
        url:
          type: string
          format: uri
        auth_method:
          type: string
          enum: [token, basic_auth, keycloak_integration, none]
        tags:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueTag'

    DatasourceUpdate:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [victoriametrics, grafana, elasticsearch, prometheus, custom]
        url:
          type: string
          format: uri
        auth_method:
          type: string
          enum: [token, basic_auth, keycloak_integration, none]
        status:
          type: string
          enum: [ok, error, pending]
        tags:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueTag'

    PaginatedDatasources:
      type: object
      required: [items, total]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Datasource'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    DatasourceTestRequest:
      type: object
      required: [type, url, auth_method]
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [victoriametrics, grafana, elasticsearch, prometheus, custom]
        url:
          type: string
          format: uri
        auth_method:
          type: string
          enum: [token, basic_auth, keycloak_integration, none]
        tags:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueTag'

    DatasourceTestResult:
      type: object
      required: [success, status, result, latency_ms, message, tested_at, tested_by]
      properties:
        success:
          type: boolean
        status:
          type: string
          enum: [ok, error]
        result:
          type: string
          enum: [success, failed]
        latency_ms:
          type: integer
        message:
          type: string
        tested_at:
          type: string
          format: date-time
        tested_by:
          type: string

    DatasourceConnectionTestLog:
      type: object
      required: [id, datasource_id, status, result, latency_ms, message, tested_by, tested_at]
      properties:
        id:
          type: string
        datasource_id:
          type: string
        status:
          type: string
          enum: [ok, error]
        result:
          type: string
          enum: [success, failed]
        latency_ms:
          type: integer
        message:
          type: string
        tested_by:
          type: string
        tested_at:
          type: string
          format: date-time

    PaginatedDatasourceConnectionTests:
      type: object
      required: [items, total]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DatasourceConnectionTestLog'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    DiscoveryJob:
      type: object
      required: [id, name, kind, schedule, last_run_at, status, target_config, tags, created_at, updated_at]
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        kind:
          type: string
          enum: [k8s, snmp, cloud_provider, static_range, custom_script]
        schedule:
          type: string
        last_run_at:
          type: string
        status:
          type: string
          enum: [pending, running, success, failed, cancelled]
        target_config:
          type: object
          additionalProperties: true
        exporter_binding:
          type: object
          nullable: true
          properties:
            template_id:
              type: string
              enum: [none, node_exporter, snmp_exporter, modbus_exporter, ipmi_exporter]
            overrides_yaml:
              type: string
            mib_profile_id:
              type: string
        edge_gateway:
          type: object
          nullable: true
          properties:
            enabled:
              type: boolean
            gateway_id:
              type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueTag'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true

    DiscoveryJobCreate:
      type: object
      required: [name, kind, schedule]
      properties:
        name:
          type: string
        kind:
          type: string
          enum: [k8s, snmp, cloud_provider, static_range, custom_script]
        schedule:
          type: string
        target_config:
          type: object
          additionalProperties: true
        exporter_binding:
          type: object
          properties:
            template_id:
              type: string
              enum: [none, node_exporter, snmp_exporter, modbus_exporter, ipmi_exporter]
            overrides_yaml:
              type: string
            mib_profile_id:
              type: string
        edge_gateway:
          type: object
          properties:
            enabled:
              type: boolean
            gateway_id:
              type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueTag'

    DiscoveryJobUpdate:
      type: object
      properties:
        name:
          type: string
        kind:
          type: string
          enum: [k8s, snmp, cloud_provider, static_range, custom_script]
        schedule:
          type: string
        status:
          type: string
          enum: [pending, running, success, failed, cancelled]
        target_config:
          type: object
          additionalProperties: true
        exporter_binding:
          type: object
          properties:
            template_id:
              type: string
              enum: [none, node_exporter, snmp_exporter, modbus_exporter, ipmi_exporter]
            overrides_yaml:
              type: string
            mib_profile_id:
              type: string
        edge_gateway:
          type: object
          properties:
            enabled:
              type: boolean
            gateway_id:
              type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueTag'

    DiscoveryJobTestRequest:
      type: object
      required: [name, kind, schedule]
      properties:
        name:
          type: string
        kind:
          type: string
          enum: [k8s, snmp, cloud_provider, static_range, custom_script]
        schedule:
          type: string
        target_config:
          type: object
          additionalProperties: true

    DiscoveryJobTestResult:
      type: object
      required: [success, discovered_count, message]
      properties:
        success:
          type: boolean
        discovered_count:
          type: integer
        message:
          type: string
        warnings:
          type: array
          items:
            type: string

    PaginatedDiscoveryJobs:
      type: object
      required: [items, total]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DiscoveryJob'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    ResourceGroup:
      type: object
      required: [id, name, owner_team, member_ids, status_summary, created_at, updated_at]
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        owner_team:
          type: string
        member_ids:
          type: array
          items:
            type: string
        status_summary:
          type: object
          properties:
            healthy:
              type: integer
            warning:
              type: integer
            critical:
              type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true

    ResourceGroupCreate:
      type: object
      required: [name, owner_team, member_ids]
      properties:
        name:
          type: string
        description:
          type: string
        owner_team:
          type: string
        member_ids:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueTag'

    ResourceGroupUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        owner_team:
          type: string
        member_ids:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueTag'

    PaginatedResourceGroups:
      type: object
      required: [items, total]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ResourceGroup'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    DiscoveredResource:
      type: object
      required: [id, name, ip, type, status, tags]
      properties:
        id:
          type: string
        name:
          type: string
        ip:
          type: string
        type:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueTag'
        status:
          type: string
          enum: [new, imported, ignored]
        ignored_at:
          type: string
          format: date-time
          nullable: true

    TimeSeriesData:
      type: array
      items:
        type: array
        minItems: 2
        maxItems: 2
        items:
          - type: string
            format: date-time
          - type: number
      example:
        - ["2024-10-01T10:00:00Z", 45.2]
        - ["2024-10-01T10:01:00Z", 46.1]

    MetricsData:
      type: object
      required: [cpu, memory]
      properties:
        cpu:
          $ref: '#/components/schemas/TimeSeriesData'
        memory:
          $ref: '#/components/schemas/TimeSeriesData'

    ResourceOverviewData:
      type: object
      properties:
        distribution_by_type:
          type: array
          items:
            type: object
            properties:
              value:
                type: integer
              name:
                type: string
        distribution_by_provider:
          type: array
          items:
            type: object
            properties:
              provider:
                type: string
              count:
                type: integer
        recently_discovered:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              type:
                type: string
              discovered_at:
                type: string
                format: date-time
              job_id:
                type: string
        groups_with_most_alerts:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              criticals:
                type: integer
              warnings:
                type: integer