# IAM API Paths
paths:
  /iam/users:
    get:
      tags: [IAM]
      summary: List users
      description: Retrieve a paginated list of users.
      operationId: listIamUsers
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: keyword
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [IAM]
      summary: Create user
      description: Create a new user.
      operationId: createIamUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/users/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    patch:
      tags: [IAM]
      summary: Update user
      description: Update an existing user.
      operationId: updateIamUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [IAM]
      summary: Delete user
      description: Soft delete a user.
      operationId: deleteIamUser
      responses:
        '204':
          description: User deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/users/batch-actions:
    post:
      tags: [IAM]
      summary: Batch user operations
      description: Perform batch operations on multiple users.
      operationId: batchUpdateIamUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, ids]
              properties:
                action:
                  type: string
                  enum: [delete, disable]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch operation completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/users/import:
    post:
      tags: [IAM]
      summary: Import users
      description: Bulk import users from a provided payload.
      operationId: importIamUsers
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                source:
                  type: string
                  description: Optional label describing the import source.
      responses:
        '200':
          description: Import summary message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/teams:
    get:
      tags: [IAM]
      summary: List teams
      description: Retrieve a paginated list of teams.
      operationId: listIamTeams
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: keyword
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of teams.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTeams'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [IAM]
      summary: Create team
      description: Create a new team.
      operationId: createIamTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreate'
      responses:
        '201':
          description: Team created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/teams/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    patch:
      tags: [IAM]
      summary: Update team
      description: Update an existing team.
      operationId: updateIamTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamUpdate'
      responses:
        '200':
          description: Team updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [IAM]
      summary: Delete team
      description: Soft delete a team.
      operationId: deleteIamTeam
      responses:
        '204':
          description: Team deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/teams/batch-actions:
    post:
      tags: [IAM]
      summary: Batch team operations
      description: Perform batch operations on multiple teams.
      operationId: batchUpdateIamTeams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, ids]
              properties:
                action:
                  type: string
                  enum: [delete]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch operation completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/roles:
    get:
      tags: [IAM]
      summary: List roles
      description: Retrieve a paginated list of roles.
      operationId: listIamRoles
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: keyword
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoles'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [IAM]
      summary: Create role
      description: Create a new role.
      operationId: createIamRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreate'
      responses:
        '201':
          description: Role created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/roles/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    patch:
      tags: [IAM]
      summary: Update role
      description: Update an existing role.
      operationId: updateIamRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdate'
      responses:
        '200':
          description: Role updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [IAM]
      summary: Delete role
      description: Soft delete a role.
      operationId: deleteIamRole
      responses:
        '204':
          description: Role deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/roles/batch-actions:
    post:
      tags: [IAM]
      summary: Batch role operations
      description: Perform batch operations on multiple roles.
      operationId: batchUpdateIamRoles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, ids]
              properties:
                action:
                  type: string
                  enum: [delete]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch operation completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/permissions:
    get:
      tags: [IAM]
      summary: List available permissions
      description: Retrieve the list of all available permissions in the system.
      operationId: listIamPermissions
      responses:
        '200':
          description: A list of available permissions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolePermission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /iam/audit-logs:
    get:
      tags: [IAM]
      summary: List audit logs
      description: Retrieve a paginated list of audit log records.
      operationId: listIamAuditLogs
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
      responses:
        '200':
          description: A paginated list of audit logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuditLogs'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    PaginatedUsers:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
    PaginatedTeams:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
    PaginatedRoles:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
    PaginatedAuditLogs:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer