openapi: 3.0.0
info:
  title: SRE Platform API
  version: 1.0.0
  description: |
    Comprehensive SRE Platform API for incident management, resource monitoring, automation, and system observability.

    ## Features
    - üìä Dashboard Management
    - üö® Incident & Alert Management
    - üîß Resource & Topology Management
    - ü§ñ Automation & Playbooks
    - üìà Analysis & Insights
    - üë• IAM & Access Control
    - üì¢ Notification Management
    - ‚öôÔ∏è System Settings

  contact:
    name: SRE Platform Team
    email: sre@example.com
  license:
    name: MIT

servers:
  - url: http://localhost:4000/api/v1
    description: Development server
  - url: https://api.sre-platform.example.com/api/v1
    description: Production server

security:
  - bearerAuth: []

tags:
  - name: Dashboards
    description: Dashboard management and visualization
  - name: Incidents
    description: Incident tracking and management
  - name: Alert Rules
    description: Alert rule configuration
  - name: Silence Rules
    description: Alert silence management
  - name: Resources
    description: Resource inventory and monitoring
  - name: Resource Groups
    description: Resource grouping and organization
  - name: Resource Links
    description: Resource topology and relationships
  - name: Automation
    description: Automation playbooks and executions
  - name: IAM
    description: Identity and access management
  - name: Notifications
    description: Notification channels and strategies
  - name: Analysis
    description: AI-powered analysis and insights
  - name: Settings
    description: System configuration and preferences
  - name: System
    description: System information and utilities

paths:
  # ===================
  # Dashboards
  # ===================
  /dashboards:
    get:
      tags: [Dashboards]
      summary: List dashboards
      description: Retrieve a paginated list of dashboards with optional filtering
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: type
          in: query
          schema:
            type: string
            enum: [built-in, custom, grafana]
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    example: 1
                  page_size:
                    type: integer
                    example: 20
                  total:
                    type: integer
                    example: 45
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dashboard'

    post:
      tags: [Dashboards]
      summary: Create dashboard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardCreate'
      responses:
        '201':
          description: Dashboard created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          $ref: '#/components/responses/BadRequest'

  /dashboards/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'

    get:
      tags: [Dashboards]
      summary: Get dashboard by ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [Dashboards]
      summary: Update dashboard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardUpdate'
      responses:
        '200':
          description: Dashboard updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Dashboards]
      summary: Delete dashboard (soft delete)
      responses:
        '204':
          description: Dashboard deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /dashboards/batch-actions:
    post:
      tags: [Dashboards]
      summary: Batch dashboard operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, dashboard_ids]
              properties:
                action:
                  type: string
                  enum: [delete]
                dashboard_ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'

  # ===================
  # Incidents
  # ===================
  /incidents:
    get:
      tags: [Incidents]
      summary: List incidents
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/IncidentStatus'
        - name: severity
          in: query
          schema:
            $ref: '#/components/schemas/IncidentSeverity'
        - name: assignee
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Incident'

    post:
      tags: [Incidents]
      summary: Create incident
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentCreate'
      responses:
        '201':
          description: Incident created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incident'

  /incidents/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'

    get:
      tags: [Incidents]
      summary: Get incident by ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incident'

    patch:
      tags: [Incidents]
      summary: Update incident
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentUpdate'
      responses:
        '200':
          description: Incident updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incident'

    delete:
      tags: [Incidents]
      summary: Delete incident
      responses:
        '204':
          description: Incident deleted

  /incidents/{id}/notify:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    post:
      tags: [Incidents]
      summary: Trigger incident notifications
      description: Manually trigger notification delivery for the specified incident.
      responses:
        '200':
          description: Notification dispatched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  notification_id:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'

  /incidents/batch-close:
    post:
      tags: [Incidents]
      summary: Batch close incidents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [incident_ids]
              properties:
                incident_ids:
                  type: array
                  items:
                    type: string
                resolution_note:
                  type: string
      responses:
        '200':
          description: Batch close completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'

  /incidents/batch-assign:
    post:
      tags: [Incidents]
      summary: Batch assign incidents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [incident_ids]
              properties:
                incident_ids:
                  type: array
                  items:
                    type: string
                assignee_id:
                  type: string
                assignee_name:
                  type: string
      responses:
        '200':
          description: Batch assign completed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BatchResult'
                  - type: object
                    properties:
                      assignee:
                        type: string
                      assignee_id:
                        type: string

  /incidents/batch-ignore:
    post:
      tags: [Incidents]
      summary: Batch ignore incidents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [incident_ids]
              properties:
                incident_ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch ignore completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'

  # ===================
  # Alert Rules
  # ===================
  /alert-rules:
    get:
      tags: [Alert Rules]
      summary: List alert rules
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: enabled
          in: query
          schema:
            type: boolean
        - name: severity
          in: query
          schema:
            $ref: '#/components/schemas/IncidentSeverity'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AlertRule'

    post:
      tags: [Alert Rules]
      summary: Create alert rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertRuleCreate'
      responses:
        '201':
          description: Alert rule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertRule'

  /alert-rules/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'

    patch:
      tags: [Alert Rules]
      summary: Update alert rule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertRuleUpdate'
      responses:
        '200':
          description: Alert rule updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertRule'

    delete:
      tags: [Alert Rules]
      summary: Delete alert rule (soft delete)
      responses:
        '204':
          description: Alert rule deleted

  /alert-rules/batch-actions:
    post:
      tags: [Alert Rules]
      summary: Batch alert rule operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, rule_ids]
              properties:
                action:
                  type: string
                  enum: [delete, enable, disable]
                rule_ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'

  /silence-rules:
    get:
      tags: [Silence Rules]
      summary: List silence rules
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: keyword
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum: [single, repeat, condition]
        - name: enabled
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SilenceRule'

    post:
      tags: [Silence Rules]
      summary: Create silence rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SilenceRuleCreate'
      responses:
        '201':
          description: Silence rule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SilenceRule'

  /silence-rules/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'

    patch:
      tags: [Silence Rules]
      summary: Update silence rule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SilenceRuleUpdate'
      responses:
        '200':
          description: Silence rule updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SilenceRule'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Silence Rules]
      summary: Delete silence rule
      responses:
        '204':
          description: Silence rule deleted

  /silence-rules/templates:
    get:
      tags: [Silence Rules]
      summary: List silence rule templates
      responses:
        '200':
          description: Template list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SilenceRuleTemplate'

  /silence-rules/batch-actions:
    post:
      tags: [Silence Rules]
      summary: Batch silence rule operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, ids]
              properties:
                action:
                  type: string
                  enum: [delete, enable, disable]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'

  /silence-rules/import:
    post:
      tags: [Silence Rules]
      summary: Import silence rules
      responses:
        '200':
          description: Import completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  # ===================
  # Resources
  # ===================
  /resources:
    get:
      tags: [Resources]
      summary: List resources
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: type
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ResourceStatus'
        - name: provider
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'

    post:
      tags: [Resources]
      summary: Create resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceCreate'
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'

  /resources/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'

    get:
      tags: [Resources]
      summary: Get resource by ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'

    patch:
      tags: [Resources]
      summary: Update resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceUpdate'
      responses:
        '200':
          description: Resource updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'

    delete:
      tags: [Resources]
      summary: Delete resource (soft delete)
      responses:
        '204':
          description: Resource deleted

  /resources/batch-tags:
    post:
      tags: [Resources]
      summary: Batch tag resources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [resource_ids, tags]
              properties:
                resource_ids:
                  type: array
                  items:
                    type: string
                tags:
                  type: object
                  additionalProperties:
                    type: string
      responses:
        '200':
          description: Batch tagging completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'

  /resources/batch-actions:
    post:
      tags: [Resources]
      summary: Batch resource operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action, resource_ids]
              properties:
                action:
                  type: string
                  enum: [delete]
                resource_ids:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Batch operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'

  /resources/datasources:
    get:
      tags: [Resources]
      summary: List datasources
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/DatasourceType'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ConnectionStatus'
        - name: keyword
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Datasource list
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    example: 1
                  page_size:
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 3
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Datasource'

    post:
      tags: [Resources]
      summary: Create datasource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourceCreate'
      responses:
        '201':
          description: Datasource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datasource'
        '400':
          $ref: '#/components/responses/BadRequest'

  /resources/datasources/test:
    post:
      tags: [Resources]
      summary: Test datasource connectivity before save
      description: Validate datasource credentials and endpoint prior to persisting the configuration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourceConnectionTestRequest'
      responses:
        '200':
          description: Connection test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasourceConnectionTestResult'
        '400':
          $ref: '#/components/responses/BadRequest'

  /resources/datasources/{datasource_id}:
    parameters:
      - name: datasource_id
        in: path
        required: true
        schema:
          type: string
        description: Datasource identifier

    get:
      tags: [Resources]
      summary: Get datasource by ID
      responses:
        '200':
          description: Datasource detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datasource'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [Resources]
      summary: Update datasource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourceUpdate'
      responses:
        '200':
          description: Datasource updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datasource'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Resources]
      summary: Delete datasource (soft delete)
      responses:
        '204':
          description: Datasource deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /resources/datasources/{datasource_id}/test:
    post:
      tags: [Resources]
      summary: Test datasource connectivity
      requestBody:
        description: Optional override configuration for the test run
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: Override datasource URL for the test
      responses:
        '200':
          description: Connection test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasourceConnectionTestResult'
        '404':
          $ref: '#/components/responses/NotFound'

  /resources/datasources/{datasource_id}/connection-tests:
    get:
      tags: [Resources]
      summary: List datasource connection test logs
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Connection test history
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/DatasourceConnectionTestLog'
        '404':
          $ref: '#/components/responses/NotFound'

  # ===================
  # Automation
  # ===================
  /automation/scripts:
    get:
      tags: [Automation]
      summary: List automation playbooks
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/AutomationPlaybookType'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AutomationPlaybook'

    post:
      tags: [Automation]
      summary: Create automation playbook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationPlaybookCreate'
      responses:
        '201':
          description: Playbook created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationPlaybook'

  /automation/scripts/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'

    patch:
      tags: [Automation]
      summary: Update automation playbook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationPlaybookUpdate'
      responses:
        '200':
          description: Playbook updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationPlaybook'

    delete:
      tags: [Automation]
      summary: Delete playbook (soft delete)
      responses:
        '204':
          description: Playbook deleted

  /automation/executions:
    get:
      tags: [Automation]
      summary: List automation executions
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ExecutionStatus'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AutomationExecution'

  /automation/triggers:
    get:
      tags: [Automation]
      summary: List automation triggers
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AutomationTrigger'

    post:
      tags: [Automation]
      summary: Create automation trigger
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationTriggerCreate'
      responses:
        '201':
          description: Trigger created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationTrigger'

  # ===================
  # IAM - Users
  # ===================
  /iam/users:
    get:
      tags: [IAM]
      summary: List users
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: role
          in: query
          schema:
            type: string
            enum: [admin, sre, developer, viewer]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

    post:
      tags: [IAM]
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /iam/teams:
    get:
      tags: [IAM]
      summary: List teams
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Team'

  /iam/roles:
    get:
      tags: [IAM]
      summary: List roles
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'

  # ===================
  # Notifications
  # ===================
  /settings/notification-channels:
    get:
      tags: [Notifications]
      summary: List notification channels
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: type
          in: query
          schema:
            type: string
            enum: [email, webhook, slack, line, sms]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationChannel'

    post:
      tags: [Notifications]
      summary: Create notification channel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationChannelCreate'
      responses:
        '201':
          description: Channel created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannel'

  /settings/notification-channels/{channel_id}/test:
    post:
      tags: [Notifications]
      summary: Send test notification for a channel
      parameters:
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
          description: Notification channel identifier
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationChannelTestRequest'
      responses:
        '200':
          description: Test notification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelTestResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /settings/notification-strategies:
    get:
      tags: [Notifications]
      summary: List notification strategies
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationStrategy'

    post:
      tags: [Notifications]
      summary: Create notification strategy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationStrategyCreate'
      responses:
        '201':
          description: Strategy created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationStrategy'

  # ===================
  # Platform Settings
  # ===================
  /settings/mail:
    get:
      tags: [Settings]
      summary: Get SMTP mail settings
      responses:
        '200':
          description: Current mail settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSettings'

    put:
      tags: [Settings]
      summary: Update SMTP mail settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailSettings'
      responses:
        '200':
          description: Updated mail settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSettings'

  /settings/mail/test:
    post:
      tags: [Settings]
      summary: Trigger SMTP connectivity test
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailTestRequest'
      responses:
        '200':
          description: Mail test initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailTestResponse'

  /settings/grafana:
    get:
      tags: [Settings]
      summary: Get Grafana integration settings
      responses:
        '200':
          description: Grafana settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrafanaSettings'

    put:
      tags: [Settings]
      summary: Update Grafana integration settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrafanaSettings'
      responses:
        '200':
          description: Updated Grafana settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrafanaSettings'

  /settings/grafana/test:
    post:
      tags: [Settings]
      summary: Validate Grafana connection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrafanaTestRequest'
      responses:
        '200':
          description: Grafana connectivity test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrafanaTestResponse'

  /settings/tags/import:
    post:
      tags: [Settings]
      summary: Import tag definitions from CSV
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagBulkImportRequest'
      responses:
        '202':
          description: Tag import job accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagBulkImportResponse'

  /me/preferences/export:
    post:
      tags: [Settings]
      summary: Export current user preferences
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                format:
                  type: string
                  description: Desired export format
                  example: json
      responses:
        '200':
          description: User preference export link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferenceExportResponse'

  # ===================
  # Analysis & AI
  # ===================
  /ai/incident-analysis:
    post:
      tags: [Analysis]
      summary: Analyze incident with AI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [incident_id]
              properties:
                incident_id:
                  type: string
      responses:
        '200':
          description: Analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentAnalysis'

  /ai/resource-analysis:
    post:
      tags: [Analysis]
      summary: Analyze resource with AI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [resource_id]
              properties:
                resource_id:
                  type: string
      responses:
        '200':
          description: Analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAnalysis'

  # ===================
  # System
  # ===================
  /me:
    get:
      tags: [System]
      summary: Get current user info
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /system/health:
    get:
      tags: [System]
      summary: Get system health status
      responses:
        '200':
          description: System health
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    allOf:
                      - $ref: '#/components/schemas/ResourceStatus'
                  timestamp:
                    type: string
                    format: date-time

# ===================
# Components
# ===================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authentication token

  parameters:
    IdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Resource ID

    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number

    PageSizeParam:
      name: page_size
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page

    SortByParam:
      name: sort_by
      in: query
      schema:
        type: string
        default: created_at
      description: Field to sort by

    SortOrderParam:
      name: sort_order
      in: query
      schema:
        type: string
        enum: [asc, desc]
        default: desc
      description: Sort order

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid request parameters

    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Resource not found

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Authentication required

    AIServiceUnavailable:
      description: AI Service Unavailable
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              retry_after_seconds:
                type: integer
                minimum: 0
          example:
            error: AI analysis service is temporarily unavailable
            retry_after_seconds: 60

  schemas:
    # ===================
    # Enumerations (SSOT-aligned)
    # ===================
    IncidentStatus:
      type: string
      description: Incident lifecycle status (SSOT aligned)
      enum: [new, acknowledged, resolved, silenced]
    IncidentSeverity:
      type: string
      description: Incident severity levels (SSOT aligned)
      enum: [critical, warning, info]
    IncidentImpact:
      type: string
      description: Incident impact range (SSOT aligned)
      enum: [high, medium, low]
    IncidentPriority:
      type: string
      description: Incident response priority (SSOT aligned)
      enum: [p0, p1, p2, p3]
    IncidentCategory:
      type: string
      description: Incident categorical classification (SSOT aligned)
      enum: [infrastructure, application, network, security, other]
    ResourceStatus:
      type: string
      description: Resource health status (SSOT aligned)
      enum: [healthy, warning, critical, offline, unknown]
    DiscoveryJobKind:
      type: string
      description: Discovery job kind (SSOT aligned)
      enum: [k8s, snmp, cloud_provider, static_range, custom_script]
    DiscoveredResourceStatus:
      type: string
      description: Discovered resource status (SSOT aligned)
      enum: [new, imported, ignored]
    ConditionLogic:
      type: string
      description: Logical operator applied to grouped conditions (SSOT aligned)
      enum: [and, or]
    HttpMethod:
      type: string
      description: Supported HTTP methods for outbound requests (SSOT aligned)
      enum: [get, post, put, patch, delete]
    AutomationPlaybookType:
      type: string
      description: Automation playbook script type (SSOT aligned)
      enum: [shell, python, ansible, terraform]
    ExecutionStatus:
      type: string
      description: Automation execution status (SSOT aligned)
      enum: [pending, running, success, failed, cancelled]
    TriggerSource:
      type: string
      description: Automation trigger source (SSOT aligned)
      enum: [manual, schedule, webhook, event, custom, grafana]
    DatasourceType:
      type: string
      description: Datasource integration type (SSOT aligned)
      enum: [victoriametrics, grafana, elasticsearch, prometheus, custom]
    AuthMethod:
      type: string
      description: Datasource authentication method (SSOT aligned)
      enum: [token, basic_auth, keycloak_integration, none]
    ConnectionStatus:
      type: string
      description: Datasource connection status (SSOT aligned)
      enum: [ok, error, pending]
    AuditAction:
      type: string
      description: Audit log action verbs (SSOT aligned)
      enum: [create, read, update, delete, execute, login, logout, permission_change]
    AuditResult:
      type: string
      description: Outcome of an audited action (SSOT aligned)
      enum: [success, failure]
    RiskLevel:
      type: string
      description: Analysis risk level (SSOT aligned)
      enum: [high, medium, low]
    OptimizationType:
      type: string
      description: Optimization suggestion type (SSOT aligned)
      enum: [cost, performance, security]
    InsightType:
      type: string
      description: Analysis insight classification (SSOT aligned)
      enum: [trend, anomaly, forecast]
    EntityType:
      type: string
      description: Config versioned entity type (SSOT aligned)
      enum: [alertrule, automationplaybook, dashboard, notificationstrategy, silencerule, resource, team, user]
    # ===================
    # Core Entities
    # ===================
    Dashboard:
      type: object
      required: [id, name, type, category, created_at, updated_at]
      properties:
        id:
          type: string
          example: dash-001
        name:
          type: string
          example: Production Overview
        type:
          type: string
          enum: [built-in, custom, grafana]
          example: grafana
        category:
          type: string
          example: Infrastructure
        description:
          type: string
        owner:
          type: string
        path:
          type: string
        grafana_url:
          type: string
          format: uri
        grafana_dashboard_uid:
          type: string
        grafana_folder_uid:
          type: string
        resource_ids:
          type: array
          items:
            type: string
        team_id:
          type: string
        owner_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    DashboardCreate:
      type: object
      required: [name, type, category]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [built-in, custom, grafana]
        category:
          type: string
        description:
          type: string
        owner:
          type: string
        team_id:
          type: string
        grafana_dashboard_uid:
          type: string

    DashboardUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string

    Incident:
      type: object
      required: [id, summary, resource, resource_id, rule_id, status, severity, created_at]
      properties:
        id:
          type: string
          example: INC-001
        summary:
          type: string
          example: High CPU usage detected
        resource:
          type: string
          example: web-server-01
        resource_id:
          type: string
          example: res-001
        rule:
          type: string
        rule_id:
          type: string
        status:
          allOf:
            - $ref: '#/components/schemas/IncidentStatus'
          description: Incident lifecycle status; `silenced` indicates notifications are temporarily suppressed.
          example: new
        severity:
          allOf:
            - $ref: '#/components/schemas/IncidentSeverity'
          example: warning
        impact:
          allOf:
            - $ref: '#/components/schemas/IncidentImpact'
        priority:
          allOf:
            - $ref: '#/components/schemas/IncidentPriority'
        category:
          allOf:
            - $ref: '#/components/schemas/IncidentCategory'
        assignee:
          type: string
        team_id:
          type: string
        owner_id:
          type: string
        tags:
          type: array
          items:
            type: object
            required: [key, value]
            properties:
              id:
                type: string
                readOnly: true
              key:
                type: string
              value:
                type: string
        occurred_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        acknowledged_at:
          type: string
          format: date-time
          nullable: true
        resolved_at:
          type: string
          format: date-time
          nullable: true
        silenced_by:
          type: string
          nullable: true
        notifications_sent:
          type: array
          items:
            type: object
        history:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              user:
                type: string
              action:
                type: string
              details:
                type: string

    IncidentCreate:
      type: object
      required: [resource_id, rule_id, summary, severity]
      properties:
        resource_id:
          type: string
        rule_id:
          type: string
        summary:
          type: string
        severity:
          allOf:
            - $ref: '#/components/schemas/IncidentSeverity'
        impact:
          allOf:
            - $ref: '#/components/schemas/IncidentImpact'
        priority:
          allOf:
            - $ref: '#/components/schemas/IncidentPriority'
        category:
          allOf:
            - $ref: '#/components/schemas/IncidentCategory'
        tags:
          type: array
          items:
            type: object
            required: [key, value]
            properties:
              key:
                type: string
              value:
                type: string

    IncidentUpdate:
      type: object
      properties:
        status:
          allOf:
            - $ref: '#/components/schemas/IncidentStatus'
          description: Update the incident lifecycle state; use `silenced` to pause notifications.
        assignee:
          type: string
        tags:
          type: array
          items:
            type: object
            required: [key, value]
            properties:
              key:
                type: string
              value:
                type: string

    RuleCondition:
      type: object
      required: [metric, operator, threshold, duration_minutes]
      properties:
        metric:
          type: string
        operator:
          type: string
          enum: ['>', '<', '>=', '<=', '==', '!=']
        threshold:
          type: number
        duration_minutes:
          type: integer
          minimum: 0

    ConditionGroup:
      type: object
      required: [logic, conditions, severity]
      properties:
        logic:
          allOf:
            - $ref: '#/components/schemas/ConditionLogic'
        severity:
          allOf:
            - $ref: '#/components/schemas/IncidentSeverity'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/RuleCondition'

    AlertRule:
      type: object
      required: [id, name, enabled, severity, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        enabled:
          type: boolean
        severity:
          allOf:
            - $ref: '#/components/schemas/IncidentSeverity'
        conditions_summary:
          type: string
        automation_enabled:
          type: boolean
        target_resource_ids:
          type: array
          items:
            type: string
        target_scope:
          type: string
        triggered_count:
          type: integer
        version:
          type: integer
        condition_groups:
          type: array
          items:
            $ref: '#/components/schemas/ConditionGroup'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    AlertRuleCreate:
      type: object
      required: [name, severity]
      properties:
        name:
          type: string
        enabled:
          type: boolean
          default: true
        severity:
          allOf:
            - $ref: '#/components/schemas/IncidentSeverity'
        conditions_summary:
          type: string
        automation_enabled:
          type: boolean

    AlertRuleUpdate:
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
        severity:
          allOf:
            - $ref: '#/components/schemas/IncidentSeverity'

    SilenceMatcher:
      type: object
      required: [key, operator, value]
      properties:
        key:
          type: string
        operator:
          type: string
          enum: ['=', '!=', '~=']
        value:
          type: string

    SilenceSchedule:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [single, recurring]
        starts_at:
          type: string
          format: date-time
        ends_at:
          type: string
          format: date-time
        cron:
          type: string
        cron_description:
          type: string
        timezone:
          type: string

    SilenceRule:
      type: object
      required: [id, name, enabled, type, matchers, schedule]
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        type:
          type: string
          enum: [single, repeat, condition]
        matchers:
          type: array
          items:
            $ref: '#/components/schemas/SilenceMatcher'
        schedule:
          $ref: '#/components/schemas/SilenceSchedule'
        creator:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    SilenceRuleCreate:
      type: object
      required: [name, enabled, type, matchers, schedule]
      properties:
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        type:
          type: string
          enum: [single, repeat, condition]
        matchers:
          type: array
          items:
            $ref: '#/components/schemas/SilenceMatcher'
        schedule:
          $ref: '#/components/schemas/SilenceSchedule'

    SilenceRuleUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        type:
          type: string
          enum: [single, repeat, condition]
        matchers:
          type: array
          items:
            $ref: '#/components/schemas/SilenceMatcher'
        schedule:
          $ref: '#/components/schemas/SilenceSchedule'

    SilenceRuleTemplate:
      type: object
      required: [id, name, data]
      properties:
        id:
          type: string
        name:
          type: string
        data:
          type: object
          additionalProperties: true

    Resource:
      type: object
      required: [id, name, type, status, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        status:
          allOf:
            - $ref: '#/components/schemas/ResourceStatus'
        provider:
          type: string
        region:
          type: string
        ip:
          type: string
        tags:
          type: array
          items:
            type: object
            required: [key, value]
            properties:
              id:
                type: string
                readOnly: true
              key:
                type: string
              value:
                type: string
        datasource_id:
          type: string
        metrics:
          type: object
        last_check_in:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    ResourceCreate:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
        provider:
          type: string
        region:
          type: string
        ip:
          type: string
        tags:
          type: array
          items:
            type: object
            required: [key, value]
            properties:
              key:
                type: string
              value:
                type: string

    ResourceUpdate:
      type: object
      properties:
        name:
          type: string
        status:
          allOf:
            - $ref: '#/components/schemas/ResourceStatus'
        tags:
          type: array
          items:
            type: object
            required: [key, value]
            properties:
              key:
                type: string
              value:
                type: string

    AutomationPlaybook:
      type: object
      required: [id, name, type, content, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        type:
          allOf:
            - $ref: '#/components/schemas/AutomationPlaybookType'
        content:
          type: string
        description:
          type: string
        parameters:
          type: array
          items:
            type: object
        last_run_at:
          type: string
          format: date-time
        last_run_status:
          allOf:
            - $ref: '#/components/schemas/ExecutionStatus'
        run_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    AutomationPlaybookCreate:
      type: object
      required: [name, type, content]
      properties:
        name:
          type: string
        type:
          allOf:
            - $ref: '#/components/schemas/AutomationPlaybookType'
        content:
          type: string
        description:
          type: string

    AutomationPlaybookUpdate:
      type: object
      properties:
        name:
          type: string
        content:
          type: string
        description:
          type: string

    AutomationExecution:
      type: object
      required: [id, script_id, script_name, trigger_source, triggered_by, status, start_time]
      properties:
        id:
          type: string
        script_id:
          type: string
        script_name:
          type: string
        incident_id:
          type: string
        alert_rule_id:
          type: string
        target_resource_id:
          type: string
        trigger_source:
          allOf:
            - $ref: '#/components/schemas/TriggerSource'
        triggered_by:
          type: string
        status:
          allOf:
            - $ref: '#/components/schemas/ExecutionStatus'
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        duration_ms:
          type: integer
        output:
          type: string
        error:
          type: string
        resolved_incident:
          type: boolean

    AutomationTrigger:
      type: object
      required: [id, name, type, enabled, target_playbook_id, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [schedule, webhook, event]
        enabled:
          type: boolean
        target_playbook_id:
          type: string
        retry_policy:
          type: string
          enum: [none, fixed, exponential]
        cron:
          type: string
        webhook_url:
          type: string
        event_conditions:
          type: object
        last_triggered_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AutomationTriggerCreate:
      type: object
      required: [name, type, enabled, target_playbook_id]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [schedule, webhook, event]
        enabled:
          type: boolean
        target_playbook_id:
          type: string
        retry_policy:
          type: string
          enum: [none, fixed, exponential]
        cron:
          type: string
        event_conditions:
          type: object

    User:
      type: object
      required: [id, name, email, role, team, status, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, sre, developer, viewer]
        team:
          type: string
        status:
          type: string
          enum: [active, invited, inactive]
        avatar:
          type: string
        last_login_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    UserCreate:
      type: object
      required: [name, email, role, team]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, sre, developer, viewer]
        team:
          type: string

    Team:
      type: object
      required: [id, name, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        owner_id:
          type: string
        member_ids:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    Role:
      type: object
      required: [id, name, permissions, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
        user_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    NotificationChannel:
      type: object
      required: [id, name, type, enabled, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [email, webhook, slack, line, sms]
        enabled:
          type: boolean
        config:
          type: object
        last_test_result:
          type: string
          enum: [success, failed, not_tested]
        last_tested_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    NotificationChannelCreate:
      type: object
      required: [name, type, enabled, config]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [email, webhook, slack, line, sms]
        enabled:
          type: boolean
        config:
          type: object

    NotificationStrategy:
      type: object
      required: [id, name, enabled, trigger_condition, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        enabled:
          type: boolean
        trigger_condition:
          type: string
        severity_levels:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IncidentSeverity'
        impact_levels:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IncidentImpact'
        channel_ids:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    NotificationStrategyCreate:
      type: object
      required: [name, enabled, trigger_condition]
      properties:
        name:
          type: string
        enabled:
          type: boolean
        trigger_condition:
          type: string
        severity_levels:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IncidentSeverity'
        channel_ids:
          type: array
          items:
            type: string

    ConfigVersion:
      type: object
      required: [id, entity_type, entity_id, version, changed_by, created_at]
      properties:
        id:
          type: string
        entity_type:
          allOf:
            - $ref: '#/components/schemas/EntityType'
        entity_id:
          type: string
        version:
          type: integer
        config_snapshot:
          type: object
        change_summary:
          type: string
        changed_by:
          type: string
        created_at:
          type: string
          format: date-time

    AuditLog:
      type: object
      required: [id, user_id, user_name, action, entity_type, entity_id, result, created_at]
      properties:
        id:
          type: string
        user_id:
          type: string
        user_name:
          type: string
        action:
          allOf:
            - $ref: '#/components/schemas/AuditAction'
        entity_type:
          allOf:
            - $ref: '#/components/schemas/EntityType'
        entity_id:
          type: string
        entity_name:
          type: string
        changes:
          type: object
        result:
          allOf:
            - $ref: '#/components/schemas/AuditResult'
        ip_address:
          type: string
        user_agent:
          type: string
        created_at:
          type: string
          format: date-time

    IncidentAnalysis:
      type: object
      properties:
        summary:
          type: string
        root_cause:
          type: string
        impact_assessment:
          type: string
        recommended_actions:
          type: array
          items:
            type: string
        related_incidents:
          type: array
          items:
            type: string
        confidence_score:
          type: number
          format: float

    ResourceAnalysis:
      type: object
      properties:
        resource_id:
          type: string
        resource_name:
          type: string
        risk_level:
          allOf:
            - $ref: '#/components/schemas/RiskLevel'
        risk_analysis:
          type: string
        optimization_suggestions:
          type: array
          items:
            type: object
        predicted_issues:
          type: array
          items:
            type: object

    BatchResult:
      type: object
      properties:
        success:
          type: boolean
        updated:
          type: integer
        skipped_ids:
          type: array
          items:
            type: string

    Datasource:
      type: object
      required: [id, name, type, url, auth_method, status, created_at]
      properties:
        id:
          type: string
        name:
          type: string
        type:
          allOf:
            - $ref: '#/components/schemas/DatasourceType'
        url:
          type: string
          format: uri
        auth_method:
          allOf:
            - $ref: '#/components/schemas/AuthMethod'
        status:
          allOf:
            - $ref: '#/components/schemas/ConnectionStatus'
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              key:
                type: string
              value:
                type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    DatasourceCreate:
      type: object
      required: [name, type, url, auth_method]
      properties:
        name:
          type: string
        type:
          allOf:
            - $ref: '#/components/schemas/DatasourceType'
        url:
          type: string
          format: uri
        auth_method:
          allOf:
            - $ref: '#/components/schemas/AuthMethod'
        tags:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string

    DatasourceConnectionTestRequest:
      allOf:
        - $ref: '#/components/schemas/DatasourceCreate'
      properties:
        id:
          type: string
          description: Optional existing datasource identifier to associate the test result with.

    DatasourceUpdate:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        auth_method:
          allOf:
            - $ref: '#/components/schemas/AuthMethod'
        status:
          allOf:
            - $ref: '#/components/schemas/ConnectionStatus'
        tags:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string

    DatasourceConnectionTestLog:
      type: object
      required: [id, datasource_id, status, result, message, tested_at, tested_by]
      properties:
        id:
          type: string
        datasource_id:
          type: string
        status:
          allOf:
            - $ref: '#/components/schemas/ConnectionStatus'
        result:
          type: string
          enum: [success, failed, not_tested]
        latency_ms:
          type: integer
          example: 120
        message:
          type: string
        tested_at:
          type: string
          format: date-time
        tested_by:
          type: string

    DatasourceConnectionTestResult:
      type: object
      required: [success, status, result, message, tested_at, tested_by]
      properties:
        success:
          type: boolean
        status:
          allOf:
            - $ref: '#/components/schemas/ConnectionStatus'
        result:
          type: string
          enum: [success, failed, not_tested]
        latency_ms:
          type: integer
        message:
          type: string
        tested_at:
          type: string
          format: date-time
        tested_by:
          type: string

    NotificationChannelTestRequest:
      type: object
      properties:
        message:
          type: string
          description: Optional custom message used for the test notification
        recipients:
          type: array
          items:
            type: string
          description: Override recipients for email-like channels

    NotificationChannelTestResponse:
      type: object
      required: [success, result, message, tested_at]
      properties:
        success:
          type: boolean
        result:
          type: string
          enum: [success, failed, not_tested]
        message:
          type: string
        tested_at:
          type: string
          format: date-time

    MailSettings:
      type: object
      required: [smtp_server, port, username, sender_name, sender_email, encryption]
      properties:
        smtp_server:
          type: string
        port:
          type: integer
          example: 587
        username:
          type: string
        sender_name:
          type: string
        sender_email:
          type: string
          format: email
        encryption:
          type: string
          enum: [none, tls, ssl]
        encryption_modes:
          type: array
          items:
            type: string
            enum: [none, tls, ssl]

    MailTestRequest:
      type: object
      properties:
        recipient_email:
          type: string
          format: email
          description: Override recipient for the test email

    MailTestResponse:
      type: object
      required: [success, result, message, tested_at]
      properties:
        success:
          type: boolean
        result:
          type: string
          enum: [success, failed, not_tested]
        message:
          type: string
        tested_at:
          type: string
          format: date-time

    GrafanaSettings:
      type: object
      required: [enabled, url, api_key, org_id]
      properties:
        enabled:
          type: boolean
        url:
          type: string
          format: uri
        api_key:
          type: string
        org_id:
          type: integer

    GrafanaTestRequest:
      type: object
      required: [url, api_key]
      properties:
        url:
          type: string
          format: uri
        api_key:
          type: string
        org_id:
          type: integer
          description: Optional Grafana organization identifier used for validation

    GrafanaTestResponse:
      type: object
      required: [success, result, message]
      properties:
        success:
          type: boolean
        result:
          type: string
          enum: [success, failed, not_tested]
        message:
          type: string
        detected_version:
          type: string
          description: Detected Grafana version when available
        tested_at:
          type: string
          format: date-time

    TagBulkImportRequest:
      type: object
      required: [filename]
      properties:
        filename:
          type: string
          example: tags.csv
        dry_run:
          type: boolean
          default: false

    TagBulkImportJob:
      type: object
      required: [id, filename, status, total_records, imported_records, failed_records, uploaded_by, created_at]
      properties:
        id:
          type: string
        filename:
          type: string
        status:
          allOf:
            - $ref: '#/components/schemas/ExecutionStatus'
        total_records:
          type: integer
        imported_records:
          type: integer
        failed_records:
          type: integer
        error_log:
          type: array
          items:
            type: string
        uploaded_by:
          type: string
        created_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
          nullable: true

    TagBulkImportResponse:
      type: object
      required: [job]
      properties:
        job:
          $ref: '#/components/schemas/TagBulkImportJob'
        summary:
          type: object
          properties:
            imported:
              type: integer
            failed:
              type: integer
            skipped:
              type: integer

    UserPreferenceExportResponse:
      type: object
      required: [download_url, expires_at, format]
      properties:
        download_url:
          type: string
          format: uri
        expires_at:
          type: string
          format: date-time
        format:
          type: string
        job:
          type: object
          properties:
            id:
              type: string
            status:
              allOf:
                - $ref: '#/components/schemas/ExecutionStatus'
            created_at:
              type: string
              format: date-time
            completed_at:
              type: string
              format: date-time
              nullable: true
