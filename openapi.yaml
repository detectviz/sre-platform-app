openapi: 3.1.0
info:
  title: SRE 平台 API 契約
  version: 2.17.0
  description: |
    # 版本 2.17.0
    - **重大重構**: 為平台所有主要模組新增了 `/.../options` API 端點，將所有 UI 相關的硬編碼資料 (如篩選條件、狀態顏色、標籤等) 全部遷移至由 API 動態提供。此舉實現了前端 UI 與業務邏輯的完全解耦，大幅提升了系統的可維護性與擴展性。

    # 版本 2.7.0
    - **新增**: 建立了 GitHub Actions 工作流程，用於在每次推送到 `main` 分支時自動將專案部署到 GitHub Pages，實現 CI/CD。

    # 版本 2.6.0
    - **新增**: 為主要列表頁面 (告警規則、靜音規則、通知策略等) 增加了後端篩選與搜尋功能。
    - **新增**: 完成了告警規則測試、規則範本、通知管道測試、自動化重試等核心功能的 API 端點。
    - **新增**: 為 CSV 匯入功能增加了對應的 API 端點。

    本文件定義 SRE 平台前後端之間的資料契約，作為後端開發的唯一真實來源 (SSOT)。
servers:
  - url: http://localhost:4000/api/v1
    description: 本地 Mock 伺服器
tags:
  - name: 認證與個人設定
    description: 登入、個人資訊與偏好設定。
  - name: AI Copilot
    description: 整合平台所有 AI 驅動的功能。
  - name: 儀表板
    description: 儀表板的 CRUD 與戰情室設定。
  - name: 事故管理 (Incidents)
    description: 事故列表、詳情、狀態變更。
  - name: 告警規則 (Grafana 代理)
    description: 告警偵測規則設定 (代理 Grafana API)。
  - name: 靜音規則
    description: 平台增值的週期性事件靜音規則。
  - name: 資源管理
    description: 資源、資源群組與拓撲視圖。
  - name: 自動化
    description: 自動化腳本、觸發器與執行歷史。
  - name: 分析中心
    description: 日誌、追蹤與容量規劃。
  - name: 身份與存取 (IAM)
    description: 人員、團隊、角色與審計日誌。
  - name: 通知管理
    description: 通知策略、管道與歷史。
  - name: 平台設定
    description: 標籤、版面與系統級配置。
  - name: 全局功能
    description: 全局搜尋與系統健康檢查。
paths:
  # ===========================================================================
  # AUTH & PROFILE
  # ===========================================================================
  /me:
    get:
      tags:
        - 認證與個人設定
      summary: 取得目前登入者的個人資訊
      operationId: getCurrentUser
      responses:
        "200":
          description: 回傳使用者基本資料與角色。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          $ref: "#/components/responses/Unauthorized"
  
  /me/login-history:
    get:
      tags:
        - 認證與個人設定
      summary: 取得登入歷史紀錄
      operationId: getLoginHistory
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: 回傳登入歷史分頁列表。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/LoginHistoryRecord"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /me/preferences:
    get:
      tags:
        - 認證與個人設定
      summary: 取得使用者偏好設定
      operationId: getPreferences
      responses:
        "200":
          description: 回傳偏好設定資料。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferences"
        "401":
          $ref: "#/components/responses/Unauthorized"
    put:
      tags:
        - 認證與個人設定
      summary: 更新使用者偏好設定
      operationId: updatePreferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPreferences"
      responses:
        "200":
          description: 偏好設定已更新。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferences"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /me/change-password:
    post:
      tags:
        - 認證與個人設定
      summary: 變更目前登入者的密碼
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [oldPassword, newPassword]
              properties:
                oldPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
      responses:
        "204":
          description: 密碼已成功更新。
        "400":
          description: "請求無效（例如，舊密碼不正確）。"
        "401":
          $ref: "#/components/responses/Unauthorized"
  
  # ===========================================================================
  # AI COPILOT
  # ===========================================================================
  /ai/briefing:
    get:
      tags: [AI Copilot]
      summary: 取得 SRE 戰情室 AI 每日簡報
      operationId: getAIBriefing
      responses:
        "200":
          description: 回傳最新的 AI 簡報內容。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BriefingData'
  
  /ai/briefing/generate:
    post:
      tags: [AI Copilot]
      summary: 觸發生成新的 SRE 戰情室 AI 每日簡報
      operationId: generateAIBriefing
      responses:
        "200":
          description: 回傳新生成的 AI 簡報內容。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BriefingData'

  /ai/incidents/analyze:
    post:
      tags: [AI Copilot]
      summary: 產生事故的 AI 分析報告
      operationId: generateIncidentAIAnalysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                incident_ids:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: 回傳 AI 分析報告。
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IncidentAnalysis'
                  - $ref: '#/components/schemas/MultiIncidentAnalysis'

  /ai/automation/generate-script:
    post:
      tags: [AI Copilot]
      summary: 使用 AI 生成自動化腳本
      operationId: generatePlaybookWithAI
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt: { type: string }
      responses:
        "200":
          description: 回傳 AI 生成的腳本內容。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedPlaybook'

  /ai/insights/options:
    get:
      tags: [AI Copilot]
      summary: 取得 AI 洞察頁面的 UI 選項
      operationId: getAIInsightsOptions
      responses:
        "200":
          description: 回傳 AI 洞察頁面的 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIInsightsOptions"

  # ===========================================================================
  # NOTIFICATIONS (GLOBAL)
  # ===========================================================================
  /notifications:
    get:
      tags: [通知管理]
      summary: 取得通知列表
      operationId: getNotifications
      responses:
        "200":
          description: 回傳通知列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./types.ts#/components/schemas/NotificationItem"

  /notifications/options:
    get:
      tags: [通知管理]
      summary: 取得通知中心 UI 選項
      operationId: getNotificationOptions
      responses:
        "200":
          description: 回傳通知中心 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationOptions"

  /notifications/{id}/read:
    post:
      tags: [通知管理]
      summary: 將單一通知標為已讀
      operationId: markNotificationAsRead
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 通知已標為已讀
          content:
            application/json:
              schema:
                $ref: "./types.ts#/components/schemas/NotificationItem"
  
  /notifications/read-all:
    post:
      tags: [通知管理]
      summary: 將所有通知標為已讀
      operationId: markAllNotificationsAsRead
      responses:
        "200":
          description: 所有通知已標為已讀
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  
  # ===========================================================================
  # DASHBOARDS
  # ===========================================================================
  /dashboards:
    get:
      tags: [儀表板]
      summary: 取得儀表板列表
      operationId: listDashboards
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: category
          in: query
          schema: { type: string }
        - name: keyword
          in: query
          schema: { type: string }
      responses:
        "200":
          description: 回傳儀表板列表。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Dashboard"
    post:
      tags: [儀表板]
      summary: 建立儀表板
      operationId: createDashboard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dashboard"
      responses:
        "201":
          description: 儀表板建立成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
  
  /dashboards/options:
    get:
      tags: [儀表板]
      summary: 取得儀表板相關選項
      operationId: getDashboardOptions
      responses:
        "200":
          description: 回傳儀表板的類別與擁有者選項。
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items: { type: string }
                  owners:
                    type: array
                    items: { type: string }
  
  /dashboards/infrastructure-insights/options:
    get:
      tags: [儀表板]
      summary: 取得基礎設施洞察頁面 UI 選項
      operationId: getInfraInsightsOptions
      responses:
        "200":
          description: 回傳基礎設施洞察頁面 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfraInsightsOptions"

  /dashboards/{dashboard_id}:
    parameters:
      - name: dashboard_id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [儀表板]
      summary: 取得儀表板詳情
      operationId: getDashboardById
      responses:
        "200": { $ref: "#/components/responses/DashboardDetail" }
    patch:
      tags: [儀表板]
      summary: 更新儀表板設定
      operationId: updateDashboard
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Dashboard" }
      responses:
        "200": { $ref: "#/components/responses/DashboardDetail" }
    delete:
      tags: [儀表板]
      summary: 軟刪除儀表板
      operationId: deleteDashboard
      responses:
        "204": { description: "儀表板已刪除。" }
  
  /dashboards/batch-actions:
    post:
      tags: [儀表板]
      summary: 批次操作儀表板
      operationId: batchUpdateDashboards
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [delete]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: 操作成功。

  # ===========================================================================
  # INCIDENTS, RULES, SILENCES
  # ===========================================================================
  /incidents:
    get:
      tags: [事故管理 (Incidents)]
      summary: 取得事故列表
      operationId: listIncidents
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: 回傳事故分頁列表。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Incident"
  
  /incidents/options:
    get:
      tags: [事故管理 (Incidents)]
      summary: 取得事故管理 UI 選項
      operationId: getIncidentOptions
      responses:
        "200":
          description: 回傳事故管理 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentOptions"

  /incidents/{incident_id}:
    get:
      tags: [事故管理 (Incidents)]
      summary: 取得單一事故詳情
      operationId: getIncidentById
      parameters:
        - name: incident_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 回傳事故詳情。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"

  /incidents/batch-actions:
    post:
      tags: [事故管理 (Incidents)]
      summary: 批次操作事故
      operationId: batchUpdateIncidents
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [acknowledge, resolve, delete]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: 操作成功。

  /incidents/{incident_id}/actions:
    post:
      tags: [事故管理 (Incidents)]
      summary: 對事故執行狀態操作
      operationId: performIncidentAction
      parameters:
        - name: incident_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [acknowledge, resolve]
      responses:
        "200":
          description: 事故狀態已更新。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"

  /alert-rules:
    get:
      tags: [告警規則 (Grafana 代理)]
      summary: 取得告警規則列表
      operationId: listAlertRules
      parameters:
        - name: keyword
          in: query
          schema: { type: string }
        - name: severity
          in: query
          schema: { type: string, enum: [critical, warning, info] }
        - name: enabled
          in: query
          schema: { type: string, enum: ["true", "false"] }
      responses:
        "200":
          description: 告警規則列表。
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AlertRule" }
    post:
      tags: [告警規則 (Grafana 代理)]
      summary: 建立告警規則
      operationId: createAlertRule
      requestBody:
        content: { application/json: { schema: { $ref: "#/components/schemas/AlertRule" } } }
      responses:
        "201": { $ref: "#/components/responses/AlertRuleDetail" }
  
  /alert-rules/{rule_id}:
    parameters:
      - name: rule_id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [告警規則 (Grafana 代理)]
      summary: 取得告警規則詳情
      operationId: getAlertRuleById
      responses:
        "200": { $ref: "#/components/responses/AlertRuleDetail" }
    patch:
      tags: [告警規則 (Grafana 代理)]
      summary: 更新告警規則
      operationId: updateAlertRule
      requestBody:
        content: { application/json: { schema: { $ref: "#/components/schemas/AlertRule" } } }
      responses:
        "200": { $ref: "#/components/responses/AlertRuleDetail" }
    delete:
      tags: [告警規則 (Grafana 代理)]
      summary: 刪除告警規則
      operationId: deleteAlertRule
      responses:
        "204": { description: "規則已刪除。" }
  
  /alert-rules/templates:
    get:
      tags: [告警規則 (Grafana 代理)]
      summary: 取得告警規則範本
      operationId: getAlertRuleTemplates
      responses:
        "200":
          description: 告警規則範本列表。
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AlertRuleTemplate" }

  /alert-rules/import:
    post:
      tags: [告警規則 (Grafana 代理)]
      summary: 從 CSV 匯入告警規則
      operationId: importAlertRules
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filename: { type: string }
      responses:
        "200":
          description: 匯入成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /alert-rules/{rule_id}/test:
    post:
      tags: [告警規則 (Grafana 代理)]
      summary: 測試告警規則
      operationId: testAlertRule
      parameters:
        - name: rule_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  additionalProperties: true
      responses:
        "200":
          description: 回傳規則測試結果。
          content:
            application/json:
              schema:
                type: object
                properties:
                  matches: { type: boolean }
                  preview: { type: string }

  /alert-rules/batch-actions:
    post:
      tags: [告警規則 (Grafana 代理)]
      summary: 批次操作告警規則
      operationId: batchUpdateAlertRules
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [enable, disable, delete]
                ids:
                  type: array
                  items: { type: string }
      responses:
        "200": { description: "操作成功。" }

  /silence-rules:
    get:
      tags: [靜音規則]
      summary: 取得靜音規則列表
      operationId: listSilenceRules
      parameters:
        - name: keyword
          in: query
          schema: { type: string }
        - name: type
          in: query
          schema: { type: string, enum: [single, repeat, condition] }
        - name: enabled
          in: query
          schema: { type: string, enum: ["true", "false"] }
      responses:
        "200":
          description: 回傳靜音規則列表。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SilenceRule"
    post:
      tags: [靜音規則]
      summary: 建立靜音規則
      operationId: createSilenceRule
      requestBody:
        content: { application/json: { schema: { $ref: "#/components/schemas/SilenceRule" } } }
      responses:
        "201": { $ref: "#/components/responses/SilenceRuleDetail" }

  /silence-rules/options:
    get:
      tags: [靜音規則]
      summary: 取得靜音規則 UI 選項
      operationId: getSilenceRuleOptions
      responses:
        "200":
          description: 回傳靜音規則 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SilenceRuleOptions"

  /silence-rules/templates:
    get:
      tags: [靜音規則]
      summary: 取得靜音規則範本
      operationId: getSilenceRuleTemplates
      responses:
        "200":
          description: 靜音規則範本列表。
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/SilenceRuleTemplate" }

  /silence-rules/import:
    post:
      tags: [靜音規則]
      summary: 從 CSV 匯入靜音規則
      operationId: importSilenceRules
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filename: { type: string }
      responses:
        "200":
          description: 匯入成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /silence-rules/{silence_id}:
    parameters:
      - name: silence_id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [靜音規則]
      summary: 取得靜音規則詳情
      operationId: getSilenceRuleById
      responses:
        "200": { $ref: "#/components/responses/SilenceRuleDetail" }
    patch:
      tags: [靜音規則]
      summary: 更新靜音規則
      operationId: updateSilenceRule
      requestBody:
        content: { application/json: { schema: { $ref: "#/components/schemas/SilenceRule" } } }
      responses:
        "200": { $ref: "#/components/responses/SilenceRuleDetail" }
    delete:
      tags: [靜音規則]
      summary: 刪除靜音規則
      operationId: deleteSilenceRule
      responses:
        "204": { description: "靜音規則已刪除。" }
  
  /silence-rules/batch-actions:
    post:
      tags: [靜音規則]
      summary: 批次操作靜音規則
      operationId: batchUpdateSilenceRules
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [enable, disable, delete]
                ids:
                  type: array
                  items: { type: string }
      responses:
        "200": { description: "操作成功。" }

  # ===========================================================================
  # RESOURCES
  # ===========================================================================
  /resources:
    get:
      tags: [資源管理]
      summary: 取得資源列表
      operationId: listResources
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: 回傳資源列表。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Resource"
    post:
      tags: [資源管理]
      summary: 建立資源
      operationId: createResource
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Resource" }
      responses:
        "201":
          description: 資源建立成功。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Resource" }

  /resources/import:
    post:
      tags: [資源管理]
      summary: 從 CSV 匯入資源
      operationId: importResources
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filename: { type: string }
      responses:
        "200":
          description: 匯入成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /resources/options:
    get:
      tags: [資源管理]
      summary: 取得資源相關選項
      operationId: getResourceOptions
      responses:
        "200":
          description: 回傳資源的類型、提供商、區域、擁有者選項。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOptions'

  /resources/{resource_id}:
    parameters:
      - name: resource_id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [資源管理]
      summary: 取得資源詳情
      operationId: getResourceById
      responses:
        "200":
          description: 回傳資源詳情。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Resource" }
    patch:
      tags: [資源管理]
      summary: 更新資源資訊
      operationId: updateResource
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Resource" }
      responses:
        "200":
          description: 資源已更新。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Resource" }
    delete:
      tags: [資源管理]
      summary: 軟刪除資源
      operationId: deleteResource
      responses:
        "204": { description: "資源已刪除。" }

  /resources/{resource_id}/metrics:
    get:
      tags: [資源管理]
      summary: 取得資源的指標數據
      operationId: getResourceMetrics
      parameters:
        - name: resource_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 回傳 CPU 和 Memory 的時序數據。
          content:
            application/json:
              schema:
                type: object
                properties:
                  cpu:
                    type: array
                    items:
                      type: array
                      items:
                        oneOf: [{type: string, format: date-time}, {type: number}]
                  memory:
                    type: array
                    items:
                      type: array
                      items:
                        oneOf: [{type: string, format: date-time}, {type: number}]
        
  /resources/batch-actions:
    post:
      tags: [資源管理]
      summary: 批次操作資源
      operationId: batchUpdateResources
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [delete]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: 操作成功。

  /resources/topology:
    get:
      tags: [資源管理]
      summary: 取得資源拓撲資料
      operationId: getResourceTopology
      responses:
        "200":
          description: 回傳節點與連結資料。
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Resource"
                  links:
                    type: array
                    items:
                      type: object
                      properties:
                        source: { type: string }
                        target: { type: string }

  /resource-groups:
    get:
      tags: [資源管理]
      summary: 取得資源群組列表
      operationId: listResourceGroups
      responses:
        "200":
          description: 回傳資源群組列表。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceGroup"
    post:
      tags: [資源管理]
      summary: 建立資源群組
      operationId: createResourceGroup
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ResourceGroup" }
      responses:
        "201":
          description: 群組建立成功。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ResourceGroup" }

  /resource-groups/{group_id}:
    parameters:
      - name: group_id
        in: path
        required: true
        schema: { type: string, format: uuid }
    get:
      tags: [資源管理]
      summary: 取得資源群組詳情
      operationId: getResourceGroupById
      responses:
        "200":
          description: 回傳群組詳情。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ResourceGroup" }
    put:
      tags: [資源管理]
      summary: 更新資源群組
      operationId: updateResourceGroup
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ResourceGroup" }
      responses:
        "200":
          description: 群組已更新。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ResourceGroup" }
    delete:
      tags: [資源管理]
      summary: 軟刪除資源群組
      operationId: deleteResourceGroup
      responses:
        "204": { description: "群組已刪除。" }

  # ===========================================================================
  # AUTOMATION
  # ===========================================================================
  /automation/scripts:
    get:
      tags: [自動化]
      summary: 取得腳本列表
      operationId: listAutomationScripts
      responses:
        "200":
          description: 腳本列表。
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AutomationPlaybook" }
    post:
      tags: [自動化]
      summary: 建立自動化腳本
      operationId: createAutomationScript
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AutomationPlaybook" }
      responses:
        "201":
          description: 腳本建立成功。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AutomationPlaybook" }
  /automation/scripts/options:
    get:
      tags: [自動化]
      summary: 取得自動化腳本 UI 選項
      operationId: getAutomationScriptOptions
      responses:
        "200":
          description: 回傳自動化腳本 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationPlaybookOptions"

  /automation/scripts/{script_id}:
    parameters:
      - name: script_id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [自動化]
      summary: 取得腳本詳情
      operationId: getAutomationScriptById
      responses:
        "200":
          description: 腳本詳情。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AutomationPlaybook" }
    patch:
      tags: [自動化]
      summary: 更新自動化腳本
      operationId: updateAutomationScript
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AutomationPlaybook" }
      responses:
        "200":
          description: 腳本已更新。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AutomationPlaybook" }
    delete:
      tags: [自動化]
      summary: 軟刪除自動化腳本
      operationId: deleteAutomationScript
      responses:
        "204": { description: "腳本已刪除。" }
  
  /automation/scripts/{script_id}/execute:
    post:
      tags: [自動化]
      summary: 執行自動化腳本
      operationId: executeAutomationScript
      parameters:
        - name: script_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  type: object
      responses:
        "202":
          description: 腳本已開始執行。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AutomationExecution" }

  /automation/triggers:
    get:
      tags: [自動化]
      summary: 取得觸發器列表
      operationId: listAutomationTriggers
      parameters:
        - name: keyword
          in: query
          schema: { type: string }
      responses:
        "200":
          description: 觸發器列表。
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AutomationTrigger" }
    post:
      tags: [自動化]
      summary: 建立觸發器
      operationId: createAutomationTrigger
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AutomationTrigger" }
      responses:
        "201":
          description: 觸發器建立成功。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AutomationTrigger" }

  /automation/triggers/options:
    get:
      tags: [自動化]
      summary: 取得自動化觸發器 UI 選項
      operationId: getAutomationTriggerOptions
      responses:
        "200":
          description: 回傳自動化觸發器 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationTriggerOptions"

  /automation/triggers/{trigger_id}:
    parameters:
      - name: trigger_id
        in: path
        required: true
        schema: { type: string, format: uuid }
    get:
      tags: [自動化]
      summary: 取得觸發器詳情
      operationId: getAutomationTriggerById
      responses:
        "200":
          description: 觸發器詳情。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AutomationTrigger" }
    patch:
      tags: [自動化]
      summary: 更新觸發器
      operationId: updateAutomationTrigger
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AutomationTrigger" }
      responses:
        "200":
          description: 觸發器已更新。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AutomationTrigger" }
    delete:
      tags: [自動化]
      summary: 刪除觸發器
      operationId: deleteAutomationTrigger
      responses:
        "204": { description: "觸發器已刪除。" }
  
  /automation/executions:
    get:
      tags: [自動化]
      summary: 取得執行歷史列表
      operationId: listAutomationExecutions
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: playbookId
          in: query
          schema: { type: string }
        - name: status
          in: query
          schema: { type: string, enum: [success, failed, running, pending] }
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: 回傳執行日誌。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/AutomationExecution"
  
  /automation/executions/options:
    get:
      tags: [自動化]
      summary: 取得自動化執行歷史 UI 選項
      operationId: getAutomationExecutionOptions
      responses:
        "200":
          description: 回傳自動化執行歷史 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationExecutionOptions"

  /automation/executions/{execution_id}/retry:
    post:
      tags: [自動化]
      summary: 重試失敗的執行
      operationId: retryAutomationExecution
      parameters:
        - name: execution_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "202":
          description: 重試請求已接受，回傳新的執行記錄。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AutomationExecution" }

  # ===========================================================================
  # ANALYSIS
  # ===========================================================================
  /analysis/overview:
    get:
      tags: [分析中心]
      summary: 取得分析總覽數據
      operationId: getAnalysisOverview
      responses:
        "200":
          description: 回傳總覽頁所需的所有聚合數據。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisOverviewData"

  /logs:
    get:
      tags: [分析中心]
      summary: 取得日誌數據
      operationId: getLogs
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: keyword
          in: query
          schema: { type: string }
        - name: level
          in: query
          schema: { type: string, enum: [info, warning, error, debug] }
        - name: startTime
          in: query
          schema: { type: string, format: date-time }
        - name: endTime
          in: query
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: 回傳日誌分頁列表。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/LogEntry"
  /logs/options:
    get:
      tags: [分析中心]
      summary: 取得日誌探索 UI 選項
      operationId: getLogOptions
      responses:
        "200":
          description: 回傳日誌探索 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogOptions"

  /traces:
    get:
      tags: [分析中心]
      summary: 取得追蹤列表
      operationId: getTraces
      parameters:
        - name: keyword
          in: query
          schema: { type: string }
      responses:
        "200":
          description: 回傳追蹤列表。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Trace"
  /traces/{trace_id}:
    get:
      tags: [分析中心]
      summary: 取得單一追蹤詳情
      operationId: getTraceById
      parameters:
        - name: trace_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 回傳追蹤詳情。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trace"
  # ===========================================================================
  # IAM
  # ===========================================================================
  /iam/users:
    get:
      tags: [身份與存取 (IAM)]
      summary: 取得人員列表
      operationId: listIamUsers
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: keyword
          in: query
          schema: { type: string }
      responses:
        "200":
          description: 回傳人員列表。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
    post:
      tags: [身份與存取 (IAM)]
      summary: 邀請新人員
      operationId: inviteIamUser
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "201":
          description: 邀請已發送。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
  
  /iam/users/options:
    get:
      tags: [身份與存取 (IAM)]
      summary: 取得人員管理 UI 選項
      operationId: getPersonnelOptions
      responses:
        "200":
          description: 回傳人員管理 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonnelOptions"

  /iam/users/import:
    post:
      tags: [身份與存取 (IAM)]
      summary: 從 CSV 匯入人員
      operationId: importIamUsers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filename: { type: string }
      responses:
        "200":
          description: 匯入成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /iam/users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema: { type: string }
    patch:
      tags: [身份與存取 (IAM)]
      summary: 更新人員資訊與角色
      operationId: updateIamUser
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "200":
          description: 人員資料已更新。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
    delete:
      tags: [身份與存取 (IAM)]
      summary: 刪除人員帳號
      operationId: deleteIamUser
      responses:
        "204": { description: "人員已刪除。" }

  /iam/users/batch-actions:
    post:
      tags: [身份與存取 (IAM)]
      summary: 批次操作人員
      operationId: batchUpdateIamUsers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [disable, delete]
                ids:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: 操作成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /iam/teams:
    get:
      tags: [身份與存取 (IAM)]
      summary: 取得團隊列表
      operationId: listIamTeams
      responses:
        "200":
          description: 回傳團隊列表。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
    post:
      tags: [身份與存取 (IAM)]
      summary: 建立團隊
      operationId: createIamTeam
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Team" }
      responses:
        "201":
          description: 團隊建立成功。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Team" }

  /iam/teams/{team_id}:
    parameters:
      - name: team_id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [身份與存取 (IAM)]
      summary: 取得團隊詳情
      operationId: getIamTeamById
      responses:
        "200":
          description: 團隊詳情。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Team" }
    patch:
      tags: [身份與存取 (IAM)]
      summary: 更新團隊資訊
      operationId: updateIamTeam
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Team" }
      responses:
        "200":
          description: 團隊資料已更新。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Team" }
    delete:
      tags: [身份與存取 (IAM)]
      summary: 軟刪除團隊
      operationId: deleteIamTeam
      responses:
        "204": { description: "團隊已刪除。" }

  /iam/roles:
    get:
      tags: [身份與存取 (IAM)]
      summary: 取得角色列表
      operationId: listIamRoles
      responses:
        "200":
          description: 回傳角色列表。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
    post:
      tags: [身份與存取 (IAM)]
      summary: 建立角色
      operationId: createIamRole
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Role" }
      responses:
        "201":
          description: 角色建立成功。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Role" }

  /iam/roles/{role_id}:
    parameters:
      - name: role_id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [身份與存取 (IAM)]
      summary: 取得角色詳情
      operationId: getIamRoleById
      responses:
        "200":
          description: 角色詳情。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Role" }
    patch:
      tags: [身份與存取 (IAM)]
      summary: 更新角色與權限
      operationId: updateIamRole
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Role" }
      responses:
        "200":
          description: 角色已更新。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Role" }
    delete:
      tags: [身份與存取 (IAM)]
      summary: 軟刪除角色
      operationId: deleteIamRole
      responses:
        "204": { description: "角色已刪除。" }

  /iam/audit-logs:
    get:
      tags: [身份與存取 (IAM)]
      summary: 取得審計日誌列表
      operationId: listIamAuditLogs
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: user
          in: query
          schema: { type: string }
        - name: action
          in: query
          schema: { type: string }
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: 回傳審計日誌列表。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/AuditLog"

  /iam/audit-logs/options:
    get:
      tags: [身份與存取 (IAM)]
      summary: 取得審計日誌 UI 選項
      operationId: getAuditLogOptions
      responses:
        "200":
          description: 回傳審計日誌 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLogOptions"

  # ===========================================================================
  # NOTIFICATIONS & SETTINGS
  # ===========================================================================
  /settings/notification-strategies:
    get:
      tags: [通知管理]
      summary: 取得通知策略列表
      operationId: listNotificationStrategies
      parameters:
        - name: keyword
          in: query
          schema: { type: string }
      responses:
        "200":
          description: 策略列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationStrategy"
    post:
      tags: [通知管理]
      summary: 建立通知策略
      operationId: createNotificationStrategy
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NotificationStrategy" }
      responses:
        "201":
          description: 策略建立成功
          content:
            application/json:
              schema: { $ref: "#/components/schemas/NotificationStrategy" }

  /settings/notification-strategies/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    patch:
      tags: [通知管理]
      summary: 更新通知策略
      operationId: updateNotificationStrategy
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NotificationStrategy" }
      responses:
        "200":
          description: 策略已更新
          content:
            application/json:
              schema: { $ref: "#/components/schemas/NotificationStrategy" }
    delete:
      tags: [通知管理]
      summary: 軟刪除通知策略
      operationId: deleteNotificationStrategy
      responses:
        "204":
          description: 策略已刪除

  /settings/notification-channels:
    get:
      tags: [通知管理]
      summary: 取得通知管道列表
      operationId: listNotificationChannels
      parameters:
        - name: keyword
          in: query
          schema: { type: string }
      responses:
        "200":
          description: 管道列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationChannel"
    post:
      tags: [通知管理]
      summary: 建立通知管道
      operationId: createNotificationChannel
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NotificationChannel" }
      responses:
        "201":
          description: 管道建立成功
          content:
            application/json:
              schema: { $ref: "#/components/schemas/NotificationChannel" }

  /settings/notification-channels/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    patch:
      tags: [通知管理]
      summary: 更新通知管道
      operationId: updateNotificationChannel
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NotificationChannel" }
      responses:
        "200":
          description: 管道已更新
          content:
            application/json:
              schema: { $ref: "#/components/schemas/NotificationChannel" }
    delete:
      tags: [通知管理]
      summary: 軟刪除通知管道
      operationId: deleteNotificationChannel
      responses:
        "204":
          description: 管道已刪除

  /settings/notification-channels/{id}/test:
    post:
      tags: [通知管理]
      summary: 測試通知管道
      operationId: testNotificationChannel
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "202":
          description: 測試請求已接受

  /settings/notification-history:
    get:
      tags: [通知管理]
      summary: 取得通知歷史
      operationId: listNotificationHistory
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: keyword
          in: query
          schema: { type: string }
        - name: status
          in: query
          schema: { type: string, enum: [success, failed] }
        - name: channelType
          in: query
          schema: { type: string, enum: [Email, Slack, Webhook] }
        - name: startDate
          in: query
          schema: { type: string, format: date-time }
        - name: endDate
          in: query
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: 通知歷史列表
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/NotificationHistoryRecord"
  
  /settings/notification-history/options:
    get:
      tags: [通知管理]
      summary: 取得通知歷史 UI 選項
      operationId: getNotificationHistoryOptions
      responses:
        "200":
          description: 回傳通知歷史 UI 選項
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationHistoryOptions"
  
  /settings/notification-history/{id}/resend:
    post:
      tags: [通知管理]
      summary: 重新發送通知
      operationId: resendNotification
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "202":
          description: 重送請求已接受
  
  /settings/tags:
    get:
      tags: [平台設定]
      summary: 取得標籤定義列表
      operationId: listTagDefinitions
      responses:
        "200":
          description: 標籤定義列表。
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/TagDefinition" }
    post:
      tags: [平台設定]
      summary: 建立標籤定義
      operationId: createTagDefinition
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TagDefinition" }
      responses:
        "201":
          description: 標籤定義建立成功。
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TagDefinition" }

  /settings/tags/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    patch:
      tags: [平台設定]
      summary: 更新標籤定義
      operationId: updateTagDefinition
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TagDefinition" }
      responses:
        "200":
          description: 標籤定義已更新
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TagDefinition" }
    delete:
      tags: [平台設定]
      summary: 刪除標籤定義
      operationId: deleteTagDefinition
      responses:
        "204":
          description: 標籤定義已刪除
          
  /settings/tags/{id}/values:
    put:
      tags: [平台設定]
      summary: 更新標籤的允許值
      operationId: updateTagValues
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items: { $ref: "#/components/schemas/TagValue" }
      responses:
        "200":
          description: 允許值已更新

  /settings/layouts:
    get:
      tags: [平台設定]
      summary: 取得所有頁面版面配置
      operationId: getPageLayouts
      responses:
        "200":
          description: 所有頁面版面配置。
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
    put:
      tags: [平台設定]
      summary: 儲存所有頁面版面配置
      operationId: savePageLayouts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
      responses:
        "200":
          description: 版面配置已儲存。
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
  
  /settings/mail:
    get:
      tags: [平台設定]
      summary: 取得郵件設定
      operationId: getMailSettings
      responses:
        "200":
          description: 郵件設定
          content:
            application/json:
              schema: { $ref: "#/components/schemas/MailSettings" }
    put:
      tags: [平台設定]
      summary: 更新郵件設定
      operationId: updateMailSettings
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MailSettings" }
      responses:
        "200":
          description: 郵件設定已更新
          content:
            application/json:
              schema: { $ref: "#/components/schemas/MailSettings" }

  /settings/mail/test:
    post:
      tags: [平台設定]
      summary: 發送測試郵件
      operationId: testMailSettings
      responses:
        "202":
          description: 測試請求已接受

  /settings/auth:
    get:
      tags: [平台設定]
      summary: 取得身份驗證設定
      operationId: getAuthSettings
      responses:
        "200":
          description: 身份驗證設定
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthSettings" }

components:
  parameters:
    PageParam:
      name: page
      in: query
      description: "分頁頁碼 (從 1 開始)。"
      schema:
        type: integer
        minimum: 1
        default: 1
    PageSizeParam:
      name: page_size
      in: query
      description: "每頁資料筆數。"
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
  responses:
    AlertRuleDetail:
      description: 回傳告警規則詳情。
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AlertRule"
    DashboardDetail:
      description: 回傳儀表板設定與元件。
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Dashboard"
    SilenceRuleDetail:
      description: 靜音規則詳情。
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SilenceRule"
    BadRequest:
      description: 請求資料不正確。
    Unauthorized:
      description: 尚未登入或登入已逾期。
    Forbidden:
      description: 權限不足。
    NotFound:
      description: 查無資料。
    Conflict:
      description: 資料狀態衝突或重複。
  schemas:
    PaginatedResponse:
      type: object
      required: [page, page_size, total, items]
      properties:
        page: { type: integer }
        page_size: { type: integer }
        total: { type: integer }
        items: { type: array, items: {} }
    BriefingData:
      type: object
      properties:
        stability_summary: { type: string }
        key_anomaly:
          type: object
          properties:
            description: { type: string }
            resource_name: { type: string }
            resource_path: { type: string }
        recommendation:
          type: object
          properties:
            action_text: { type: string }
            button_text: { type: string }
            button_link: { type: string }
    GeneratedPlaybook:
      type: object
      properties:
        type: { type: string, enum: [shell, python, ansible, terraform] }
        content: { type: string }
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDefinition'
    Dashboard:
      $ref: "./types.ts#/components/schemas/Dashboard"
    Incident:
      $ref: "./types.ts#/components/schemas/Incident"
    IncidentAnalysis:
      $ref: "./types.ts#/components/schemas/IncidentAnalysis"
    MultiIncidentAnalysis:
      $ref: "./types.ts#/components/schemas/MultiIncidentAnalysis"
    AlertRule:
      $ref: "./types.ts#/components/schemas/AlertRule"
    AlertRuleTemplate:
      $ref: "./types.ts#/components/schemas/AlertRuleTemplate"
    SilenceRule:
      $ref: "./types.ts#/components/schemas/SilenceRule"
    SilenceRuleTemplate:
      $ref: "./types.ts#/components/schemas/SilenceRuleTemplate"
    Resource:
      $ref: "./types.ts#/components/schemas/Resource"
    ResourceGroup:
      $ref: "./types.ts#/components/schemas/ResourceGroup"
    AutomationPlaybook:
      $ref: "./types.ts#/components/schemas/AutomationPlaybook"
    ParameterDefinition:
      $ref: "./types.ts#/components/schemas/ParameterDefinition"
    AutomationTrigger:
      $ref: "./types.ts#/components/schemas/AutomationTrigger"
    AutomationExecution:
      $ref: "./types.ts#/components/schemas/AutomationExecution"
    User:
      $ref: "./types.ts#/components/schemas/User"
    Team:
      $ref: "./types.ts#/components/schemas/Team"
    Role:
      $ref: "./types.ts#/components/schemas/Role"
    AuditLog:
      $ref: "./types.ts#/components/schemas/AuditLog"
    TagDefinition:
      $ref: "./types.ts#/components/schemas/TagDefinition"
    TagValue:
      $ref: "./types.ts#/components/schemas/TagValue"
    NotificationStrategy:
      $ref: "./types.ts#/components/schemas/NotificationStrategy"
    NotificationChannel:
      $ref: "./types.ts#/components/schemas/NotificationChannel"
    NotificationHistoryRecord:
      $ref: "./types.ts#/components/schemas/NotificationHistoryRecord"
    MailSettings:
      $ref: "./types.ts#/components/schemas/MailSettings"
    AuthSettings:
      $ref: "./types.ts#/components/schemas/AuthSettings"
    UserProfile:
      $ref: "./types.ts#/components/schemas/User"
    UserPreferences:
      $ref: "./types.ts#/components/schemas/UserPreferences"
    LoginHistoryRecord:
      $ref: "./types.ts#/components/schemas/LoginHistoryRecord"
    LogEntry:
      $ref: "./types.ts#/components/schemas/LogEntry"
    Trace:
      $ref: "./types.ts#/components/schemas/Trace"
    TraceAnalysis:
      $ref: "./types.ts#/components/schemas/TraceAnalysis"
    LogAnalysis:
      $ref: "./types.ts#/components/schemas/LogAnalysis"
    CapacityPlanningData:
      $ref: "./types.ts#/components/schemas/CapacityPlanningData"
    StyleDescriptor:
      $ref: "./types.ts#/components/schemas/StyleDescriptor"
    ColorDescriptor:
      $ref: "./types.ts#/components/schemas/ColorDescriptor"
    LogOptions:
      $ref: "./types.ts#/components/schemas/LogOptions"
    SilenceRuleOptions:
      $ref: "./types.ts#/components/schemas/SilenceRuleOptions"
    InfraInsightsOptions:
      $ref: "./types.ts#/components/schemas/InfraInsightsOptions"
    IncidentOptions:
      $ref: "./types.ts#/components/schemas/IncidentOptions"
    AutomationExecutionOptions:
      $ref: "./types.ts#/components/schemas/AutomationExecutionOptions"
    AutomationPlaybookOptions:
      $ref: "./types.ts#/components/schemas/AutomationPlaybookOptions"
    NotificationOptions:
      $ref: "./types.ts#/components/schemas/NotificationOptions"
    ResourceOptions:
      $ref: "./types.ts#/components/schemas/ResourceOptions"
    AIInsightsOptions:
      $ref: "./types.ts#/components/schemas/AIInsightsOptions"
    PersonnelOptions:
      $ref: "./types.ts#/components/schemas/PersonnelOptions"
    AuditLogOptions:
      $ref: "./types.ts#/components/schemas/AuditLogOptions"
    AutomationTriggerOptions:
      $ref: "./types.ts#/components/schemas/AutomationTriggerOptions"
      
    # Mock-only schemas
    AnalysisOverviewData:
      $ref: "./types.ts#/components/schemas/AnalysisOverviewData"
    ServiceHealthData:
      $ref: "./types.ts#/components/schemas/ServiceHealthData"
    ResourceGroupStatusData:
      $ref: "./types.ts#/components/schemas/ResourceGroupStatusData"
